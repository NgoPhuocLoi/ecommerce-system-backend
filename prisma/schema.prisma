// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "tenantSpecific"]
}

model Accounts {
  id        String   @id @default(uuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  shops Shops[]

  @@map("accounts")
  @@schema("public")
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  parentId  Int?     @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  parent              Categories?                    @relation("chilren", fields: [parentId], references: [id])
  children            Categories[]                   @relation("chilren")
  recommendAttributes RecommendAttributeOfCategory[]

  @@map("categories")
  @@schema("public")
}

model Shops {
  id        String   @id @default(uuid())
  name      String
  accountId String   @map("account_id")
  account   Accounts @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("shops")
  @@schema("public")
}

model PaymentMethods {
  id   Int    @id @default(autoincrement())
  name String

  @@map("payment_methods")
  @@schema("public")
}

model OrderStatus {
  id   Int    @id @default(autoincrement())
  name String

  @@map("order_status")
  @@schema("public")
}

model PaymentStatus {
  id   Int    @id @default(autoincrement())
  name String

  @@map("payment_status")
  @@schema("public")
}

model Permissions {
  id   Int    @id @default(autoincrement())
  name String

  @@map("permissions")
  @@schema("public")
}

model RecommendAttributes {
  id   Int    @id @default(autoincrement())
  name String

  values     RecommendAttributeValues[]
  categories RecommendAttributeOfCategory[]
  products   ProductAttributes[]

  @@map("recommend_attributes")
  @@schema("public")
}

model RecommendAttributeValues {
  id                   Int    @id @default(autoincrement())
  name                 String
  recommendAttributeId Int    @map("recommend_attribute_id")

  recommendAttribute RecommendAttributes @relation(fields: [recommendAttributeId], references: [id])

  productAttributeValues AttributeValues[]

  @@map("recommend_attribute_values")
  @@schema("public")
}

model RecommendAttributeOfCategory {
  id                   Int @id @default(autoincrement())
  recommendAttributeId Int @map("recommend_attribute_id")
  categoryId           Int @map("category_id")

  recommendAttribute RecommendAttributes @relation(fields: [recommendAttributeId], references: [id])
  category           Categories          @relation(fields: [categoryId], references: [id])

  @@map("recommend_attribute_of_category")
  @@schema("public")
}

// -----------------------------------------------

model Products {
  id                  Int     @id @default(autoincrement())
  categoryId          Int     @map("category_id")
  name                String
  description         String?
  isActive            Boolean @map("is_active")
  cost                Float
  price               Float
  compareAtPrice      Float   @map("compare_at_price")
  availableQuantity   Int     @map("available_quantity")
  incomingQuantity    Int     @map("incoming_quantity")
  soldNumber          Int     @map("sold_number")
  customProductTypeId Int?    @map("custom_product_type_id")

  customProductType CustomProductType? @relation(fields: [customProductTypeId], references: [id])

  images     ProductsImages[]
  attributes ProductAttributes[]
  Variants   Variants[]

  @@map("products")
  @@schema("tenantSpecific")
}

model UploadedImages {
  id               Int      @id @default(autoincrement())
  uploadedPublicId String   @map("uploaded_public_id")
  url              String
  format           String
  size             Int
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  ProductsImages    ProductsImages[]
  variantThumbnails Variants[]

  @@map("uploaded_images")
  @@schema("tenantSpecific")
}

model ProductsImages {
  id              Int @id @default(autoincrement())
  productId       Int @map("product_id")
  uploadedImageId Int @map("uploaded_image_id")

  product Products       @relation(fields: [productId], references: [id])
  image   UploadedImages @relation(fields: [uploadedImageId], references: [id])

  @@map("products_images")
  @@schema("tenantSpecific")
}

model Variants {
  id                    Int   @id @default(autoincrement())
  productId             Int   @map("product_id")
  price                 Float
  compareAtPrice        Float @map("compare_at_price")
  availableQuantity     Int   @map("available_quantity")
  incomingQuantity      Int   @map("incoming_quantity")
  soldNumber            Int   @map("sold_number")
  uploaded_thumbnail_id Int?  @map("uploaded_thumbnail_id")

  product   Products        @relation(fields: [productId], references: [id])
  thumbnail UploadedImages? @relation(fields: [uploaded_thumbnail_id], references: [id])

  attributeWithValue VariantHasAttributeWithValue[]

  @@map("variants")
  @@schema("tenantSpecific")
}

model ProductAttributes {
  id                   Int    @id @default(autoincrement())
  productId            Int    @map("product_id")
  name                 String
  recommendAttributeId Int?   @map("recommend_attribute_id")

  product            Products             @relation(fields: [productId], references: [id])
  recommendAttribute RecommendAttributes? @relation(fields: [recommendAttributeId], references: [id])

  values                       AttributeValues[]
  variantHasAttributeWithValue VariantHasAttributeWithValue[]

  @@map("product_attributes")
  @@schema("tenantSpecific")
}

model AttributeValues {
  id                        Int    @id @default(autoincrement())
  attributeId               Int    @map("attribute_id")
  name                      String
  recommendAttributeValueId Int?   @map("recommend_attribute_value_id")

  attribute               ProductAttributes         @relation(fields: [attributeId], references: [id])
  recommendAttributeValue RecommendAttributeValues? @relation(fields: [recommendAttributeValueId], references: [id])

  variantHasAttributeWithValue VariantHasAttributeWithValue[]

  @@map("attribute_values")
  @@schema("tenantSpecific")
}

model VariantHasAttributeWithValue {
  id          Int @id @default(autoincrement())
  variantId   Int @map("variant_id")
  attributeId Int @map("attribute_id")
  valueId     Int @map("value_id")

  attribute ProductAttributes @relation(fields: [attributeId], references: [id])
  value     AttributeValues   @relation(fields: [valueId], references: [id])
  variant   Variants          @relation(fields: [variantId], references: [id])

  @@map("variant_has_option_with_value")
  @@schema("tenantSpecific")
}

model CustomProductType {
  id   Int    @id @default(autoincrement())
  name String

  products Products[]

  @@map("custom_product_types")
  @@schema("tenantSpecific")
}

model OnlineShopPages {
  id     Int    @id @default(autoincrement())
  name   String
  layout String
  link   String

  @@map("online_shop_pages")
  @@schema("tenantSpecific")
}
