// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "tenantSpecific"]
}

model Accounts {
  id        String   @id @default(uuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  shops Shops[]

  @@map("accounts")
  @@schema("public")
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String
  parentId  Int?     @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  parent              Categories?                    @relation("chilren", fields: [parentId], references: [id])
  children            Categories[]                   @relation("chilren")
  recommendAttributes RecommendAttributeOfCategory[]
  themes              Themes[]
  shopsMainlySell     Shops[]

  @@map("categories")
  @@schema("public")
}

model Shops {
  id                    String  @id @default(uuid())
  name                  String
  domain                String  @unique
  accountId             String  @map("account_id")
  hasUsedPlatformBefore Boolean @map("has_used_platform_before")
  mainCategoryIdToSell  Int?    @map("main_category_id_to_sell")
  hasConfirmedEmail     Boolean @map("has_confirmed_email")
  themeId               Int     @map("theme_id")
  provinceName          String  @map("province_name")
  provinceId            Int     @map("province_id")
  districtName          String  @map("district_name")
  districtId            Int     @map("district_id")
  wardName              String  @map("ward_name")
  wardCode              String  @map("ward_code")
  phone                 String  @map("phone")
  detailAddress         String  @map("detail_address")

  account            Accounts    @relation(fields: [accountId], references: [id])
  mainCategoryToSell Categories? @relation(fields: [mainCategoryIdToSell], references: [id])
  theme              Themes      @relation(fields: [themeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("shops")
  @@schema("public")
}

model PaymentMethods {
  id   Int    @id @default(autoincrement())
  name String

  payments Payment[]

  @@map("payment_methods")
  @@schema("public")
}

model OrderStatus {
  id    Int     @id @default(autoincrement())
  name  String
  Order Order[]

  @@map("order_status")
  @@schema("public")
}

model PaymentStatus {
  id       Int       @id @default(autoincrement())
  name     String
  payments Payment[]

  @@map("payment_status")
  @@schema("public")
}

model Permissions {
  id   Int    @id @default(autoincrement())
  name String

  @@map("permissions")
  @@schema("public")
}

model RecommendAttributes {
  id   Int    @id @default(autoincrement())
  name String

  values     RecommendAttributeValues[]
  categories RecommendAttributeOfCategory[]
  products   ProductAttributes[]

  @@map("recommend_attributes")
  @@schema("public")
}

model RecommendAttributeValues {
  id                   Int    @id @default(autoincrement())
  name                 String
  recommendAttributeId Int    @map("recommend_attribute_id")

  recommendAttribute RecommendAttributes @relation(fields: [recommendAttributeId], references: [id])

  productAttributeValues AttributeValues[]

  @@map("recommend_attribute_values")
  @@schema("public")
}

model RecommendAttributeOfCategory {
  id                   Int @id @default(autoincrement())
  recommendAttributeId Int @map("recommend_attribute_id")
  categoryId           Int @map("category_id")

  recommendAttribute RecommendAttributes @relation(fields: [recommendAttributeId], references: [id])
  category           Categories          @relation(fields: [categoryId], references: [id])

  @@map("recommend_attribute_of_category")
  @@schema("public")
}

model Themes {
  id                       Int         @id @default(autoincrement())
  name                     String
  description              String?
  defaultHeaderLayout      String      @default("") @map("default_header_layout")
  defaultFooterLayout      String      @default("") @map("default_footer_layout")
  recommendedForCategoryId Int?        @map("recommended_for_category_id")
  recommendedForCategory   Categories? @relation(fields: [recommendedForCategoryId], references: [id])

  defaultPages            DefaultOnlineShopPages[]
  usedByShops             Shops[]
  customizedInOnlineShops OnlineShops[]

  @@map("themes")
  @@schema("public")
}

model DefaultOnlineShopPages {
  id               Int     @id @default(autoincrement())
  themeId          Int     @map("theme_id")
  position         Int
  name             String
  layout           String
  link             String
  showInNavigation Boolean @map("show_in_navigation")

  theme Themes @relation(fields: [themeId], references: [id])

  @@map("pages_in_theme")
  @@schema("public")
}

// -----------------------------------------------

model Products {
  id                  Int     @id @default(autoincrement())
  categoryId          Int     @map("category_id")
  name                String
  description         String?
  isActive            Boolean @map("is_active")
  cost                Float
  price               Float
  compareAtPrice      Float   @map("compare_at_price")
  availableQuantity   Int     @map("available_quantity")
  incomingQuantity    Int     @map("incoming_quantity")
  soldNumber          Int     @map("sold_number")
  customProductTypeId Int?    @map("custom_product_type_id")

  customProductType CustomProductType? @relation(fields: [customProductTypeId], references: [id])

  images     ProductsImages[]
  attributes ProductAttributes[]
  Variants   Variants[]

  @@map("products")
  @@schema("tenantSpecific")
}

model UploadedImages {
  id               Int      @id @default(autoincrement())
  uploadedPublicId String   @map("uploaded_public_id")
  url              String
  format           String
  size             Int
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  ProductsImages    ProductsImages[]
  variantThumbnails Variants[]

  @@map("uploaded_images")
  @@schema("tenantSpecific")
}

model ProductsImages {
  id              Int @id @default(autoincrement())
  productId       Int @map("product_id")
  uploadedImageId Int @map("uploaded_image_id")

  product Products       @relation(fields: [productId], references: [id])
  image   UploadedImages @relation(fields: [uploadedImageId], references: [id])

  @@map("products_images")
  @@schema("tenantSpecific")
}

model Variants {
  id                    Int   @id @default(autoincrement())
  productId             Int   @map("product_id")
  price                 Float
  compareAtPrice        Float @map("compare_at_price")
  availableQuantity     Int   @map("available_quantity")
  incomingQuantity      Int   @map("incoming_quantity")
  soldNumber            Int   @map("sold_number")
  uploaded_thumbnail_id Int?  @map("uploaded_thumbnail_id")

  product   Products        @relation(fields: [productId], references: [id])
  thumbnail UploadedImages? @relation(fields: [uploaded_thumbnail_id], references: [id])

  attributeWithValue VariantHasAttributeWithValue[]
  OrderDetail        OrderDetail[]

  @@map("variants")
  @@schema("tenantSpecific")
}

model ProductAttributes {
  id                   Int    @id @default(autoincrement())
  productId            Int    @map("product_id")
  name                 String
  recommendAttributeId Int?   @map("recommend_attribute_id")

  product            Products             @relation(fields: [productId], references: [id])
  recommendAttribute RecommendAttributes? @relation(fields: [recommendAttributeId], references: [id])

  values                       AttributeValues[]
  variantHasAttributeWithValue VariantHasAttributeWithValue[]

  @@map("product_attributes")
  @@schema("tenantSpecific")
}

model AttributeValues {
  id                        Int    @id @default(autoincrement())
  attributeId               Int    @map("attribute_id")
  name                      String
  recommendAttributeValueId Int?   @map("recommend_attribute_value_id")

  attribute               ProductAttributes         @relation(fields: [attributeId], references: [id])
  recommendAttributeValue RecommendAttributeValues? @relation(fields: [recommendAttributeValueId], references: [id])

  variantHasAttributeWithValue VariantHasAttributeWithValue[]

  @@map("attribute_values")
  @@schema("tenantSpecific")
}

model VariantHasAttributeWithValue {
  id          Int @id @default(autoincrement())
  variantId   Int @map("variant_id")
  attributeId Int @map("attribute_id")
  valueId     Int @map("value_id")

  attribute ProductAttributes @relation(fields: [attributeId], references: [id])
  value     AttributeValues   @relation(fields: [valueId], references: [id])
  variant   Variants          @relation(fields: [variantId], references: [id])

  @@map("variant_has_option_with_value")
  @@schema("tenantSpecific")
}

model CustomProductType {
  id   Int    @id @default(autoincrement())
  name String

  products Products[]

  @@map("custom_product_types")
  @@schema("tenantSpecific")
}

model OnlineShops {
  id                  Int    @id @default(autoincrement())
  themeId             Int    @map("theme_id")
  defaultHeaderLayout String @map("default_header_layout")
  defaultFooterLayout String @map("default_footer_layout")

  theme Themes @relation(fields: [themeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("online_shops")
  @@schema("tenantSpecific")
}

model OnlineShopPages {
  id               Int     @id @default(autoincrement())
  name             String
  layout           String
  link             String
  showInNavigation Boolean @map("show_in_navigation")
  createdByDefault Boolean @map("created_by_default")

  @@map("online_shop_pages")
  @@schema("tenantSpecific")
}

model DeliveryAddresses {
  id            Int     @id @default(autoincrement()) @map("delivery_address_id")
  provinceName  String  @map("province_name")
  provinceId    Int     @map("province_id")
  districtName  String  @map("district_name")
  districtId    Int     @map("district_id")
  wardName      String  @map("ward_name")
  wardCode      String  @map("ward_code")
  phone         String  @map("phone")
  detailAddress String  @map("detail_address")
  isDefault     Boolean @map("is_default")
  isDeleted     Boolean @map("is_deleted")
  customerId    Int     @map("customer_id")

  customer Customer @relation(fields: [customerId], references: [id])
  Order    Order[]

  @@map("delivery_addresses")
  @@schema("tenantSpecific")
}

model Customer {
  id        Int    @id @default(autoincrement())
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String @unique
  password  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  deliveryAddresses DeliveryAddresses[]
  collectedCoupons  CollectedCoupons[]
  Order             Order[]

  @@map("customers")
  @@schema("tenantSpecific")
}

model Payment {
  id              Int   @id @default(autoincrement()) @map("payment_id")
  amount          Float
  paymentStatusId Int
  paymentMethodId Int   @map("payment_method_id")
  orderId         Int   @unique @map("order_id")

  paymentMethod PaymentMethods @relation(fields: [paymentMethodId], references: [id])
  paymentStatus PaymentStatus  @relation(fields: [paymentStatusId], references: [id])
  order         Order          @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("payments")
  @@schema("tenantSpecific")
}

model Order {
  id                Int   @id @default(autoincrement()) @map("order_id")
  totalPrice        Float @map("total_price")
  totalDiscount     Float @map("total_discount")
  finalPrice        Float @map("final_price")
  shippingFee       Float @map("shipping_fee")
  buyerId           Int   @map("buyer_id")
  deliveryAddressId Int   @map("delivery_address_id")
  currentStatusId   Int   @map("current_status_id")

  buyer           Customer          @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  currentStatus   OrderStatus       @relation(fields: [currentStatusId], references: [id])
  deliveryAddress DeliveryAddresses @relation(fields: [deliveryAddressId], references: [id])
  Payment         Payment?
  OrderDetail     OrderDetail[]
  usedCouponId    Int?              @map("used_coupon_id")
  usedCoupon      Coupon?           @relation(fields: [usedCouponId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
  @@schema("tenantSpecific")
}

model OrderDetail {
  orderId   Int   @map("order_id")
  variantId Int   @map("variant_id")
  quantity  Int
  price     Float
  discount  Float @default(0)

  order   Order    @relation(fields: [orderId], references: [id])
  variant Variants @relation(fields: [variantId], references: [id])

  @@id([orderId, variantId])
  @@map("order_details")
  @@schema("tenantSpecific")
}

model Coupon {
  id                Int      @id @default(autoincrement()) @map("coupon_id")
  code              String   @unique
  discountType      String
  discountValue     Float
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  quantity          Int
  visible           Boolean  @default(true)
  collectedQuantity Int      @default(0) @map("collected_quantity")
  currentUse        Int      @default(0) @map("current_use")
  minimumPriceToUse Float    @map("minumin_price_to_use")

  accountsCollected CollectedCoupons[]
  ordersUsed        Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("coupons")
  @@schema("tenantSpecific")
}

model CollectedCoupons {
  customerId Int     @map("customer_id")
  couponId   Int     @map("coupon_id")
  used       Boolean @default(false)

  customer Customer @relation(fields: [customerId], references: [id])
  coupon   Coupon   @relation(fields: [couponId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([customerId, couponId])
  @@map("collected_coupons")
  @@schema("tenantSpecific")
}
